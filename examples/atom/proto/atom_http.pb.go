// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0-rc7

package proto

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GreeterHTTPServer interface {
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
	EchoError(context.Context, *EchoRequest) (*EchoReply, error)
	EchoSlow(context.Context, *EchoRequest) (*EchoReply, error)
	Hello(context.Context, *emptypb.Empty) (*HelloReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/hello", _Greeter_Hello0_HTTP_Handler(srv))
	r.PUT("/hello", _Greeter_Hello1_HTTP_Handler(srv))
	r.DELETE("/hello", _Greeter_Hello2_HTTP_Handler(srv))
	r.PATCH("/hello", _Greeter_Hello3_HTTP_Handler(srv))
	r.GET("/hello", _Greeter_Hello4_HTTP_Handler(srv))
	r.GET("/echo/{param}", _Greeter_Echo0_HTTP_Handler(srv))
	r.GET("/echo/error/{param}", _Greeter_EchoError0_HTTP_Handler(srv))
	r.GET("/echo/slow/{param}", _Greeter_EchoSlow0_HTTP_Handler(srv))
}

func _Greeter_Hello0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Hello1_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Hello2_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Hello3_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Hello4_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Hello")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Hello(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_Echo0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EchoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/Echo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Echo(ctx, req.(*EchoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EchoReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_EchoError0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EchoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/EchoError")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EchoError(ctx, req.(*EchoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EchoReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_EchoSlow0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EchoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/atom.Greeter/EchoSlow")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EchoSlow(ctx, req.(*EchoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EchoReply)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	Echo(ctx context.Context, req *EchoRequest, opts ...http.CallOption) (rsp *EchoReply, err error)
	EchoError(ctx context.Context, req *EchoRequest, opts ...http.CallOption) (rsp *EchoReply, err error)
	EchoSlow(ctx context.Context, req *EchoRequest, opts ...http.CallOption) (rsp *EchoReply, err error)
	Hello(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) Echo(ctx context.Context, in *EchoRequest, opts ...http.CallOption) (*EchoReply, error) {
	var out EchoReply
	pattern := "/echo/{param}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/atom.Greeter/Echo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) EchoError(ctx context.Context, in *EchoRequest, opts ...http.CallOption) (*EchoReply, error) {
	var out EchoReply
	pattern := "/echo/error/{param}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/atom.Greeter/EchoError"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) EchoSlow(ctx context.Context, in *EchoRequest, opts ...http.CallOption) (*EchoReply, error) {
	var out EchoReply
	pattern := "/echo/slow/{param}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/atom.Greeter/EchoSlow"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) Hello(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/atom.Greeter/Hello"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
